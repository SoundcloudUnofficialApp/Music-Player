
import UIKit

/// convenient way to access Plists via PlistFiles, generated by SwiftGen
struct PlistManager {
    
    private enum Key: String {
        case artist, album, track, artwork
    }
    
    static let audioList: [[String: Any]] = {
        return PlistFiles.items
    }()
    static var randTrackIdx: Int {
        return Int(arc4random_uniform(UInt32(audioList.count)))
    }
    static var randTrack: AudioTrack {
        return tracks[randTrackIdx]
    }
    
    static func readTrack(_ index: Int) -> AudioTrack {
        return AudioTrack(url: trackURL(index),
                          name: trackName(index),
                          artist: artist(index),
                          album: album(index),
                          artworkName: artworkName(index))
    }

    static let tracks: [AudioTrack] = {
        var all = [AudioTrack]()
        for i in 0..<audioList.count {
            all.append(readTrack(i))
        }
        return all
    }()
    
    
    //MARK: -
    
    static func trackURL(_ index: Int) -> URL {
        return URL(fileURLWithPath: Bundle.main.path(forResource: trackName(index), ofType: "mp3")!)
    }

    static func trackName(_ index: Int) -> String {
        return readValue(index, .track)
    }
    static func trackLength(_ index: Int) -> Double {
        return getTrackDuration(audioFileURL: trackURL(index))
    }
    static func artist(_ index: Int) -> String {
        return readValue(index, .artist)
    }
    static func album(_ index: Int) -> String {
        return readValue(index, .album)
    }
    
    static func artworkName(_ index: Int) -> String {
        return readValue(index, .artwork)
    }
    static func artworkImage(_ index: Int) -> UIImage {
        return UIImage(named: artworkName(index))!
    }
    /// currenly all images are "*.png"
    static func artworkURL(_ index: Int,
                           imageExtension: String = "png") -> URL {
        return getArtworkURL(artworkName(index), imageExtension: imageExtension)
    }
    
    
    private static func readValue<T>(_ index: Int,
                                     _ key: Key) -> T {
        return Self.audioList[index][key.rawValue] as! T
    }
}

